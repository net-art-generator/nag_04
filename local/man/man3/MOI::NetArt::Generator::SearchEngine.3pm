.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MOI::NetArt::Generator::SearchEngine 3"
.TH MOI::NetArt::Generator::SearchEngine 3 "2003-07-02" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
\&\fBMOI::NetArt::Generator::SearchEngine\fR \- Bundeling a query to serveral 
Search\-backends.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use MOI::NetArt::Generator::SearchEngine;
.Ve
.PP
.Vb 10
\& my $se = MOI::NetArt::Generator::SearchEngine->new(
\&     backends => {
\&         AltaVista => {},
\&         Google    => {
\&             new_options     => { key => '__place your key here__' },
\&             query_options   => {}
\&         },
\&     },
\&     useragent => $ref_to_the_UA
\& );
.Ve
.PP
or:
.PP
.Vb 1
\& my $se = MOI::NetArt::Generator::SearchEngine->new( backends => 'my_config_filename' );
.Ve
.PP
.Vb 1
\& $se->query('NetArt Generator');
.Ve
.PP
.Vb 1
\& my @url = keys %{ $se->fetch_result(10) };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module offers an object wich bundeles a query to serveral 
Search-backends of WWW::Search. The options to instance the 
backends and to generate a \fInative_query\fR for each backend can 
be configured by a given \s-1HASH\s0 or a file. If a filename is given,
it's content would be evaluated to the \s-1HASH\s0. So a customization
is possible.
.PP
This module is written to work in the \s-1MOI\s0 enviroment to feed the
MOI::NetArt::Generator
.SH "METHODS"
.IX Header "METHODS"
.Sh "new( backend => {} value [, ...] ), new( 'my_config_filename' )"
.IX Subsection "new( backend => {} value [, ...] ), new( 'my_config_filename' )"
Creates a new instance of this class.
.PP
Example:
.PP
.Vb 3
\& my $se = MOI::NetArt::Generator::SearchEngine->new(  
\&     backends => { AltaVista => {} }
\& );
.Ve
.PP
or:
.PP
.Vb 3
\& my $se = MOI::NetArt::Generator::SearchEngine->new( 
\&     backends => 'my_config_filename';
\& );
.Ve
.IP "\fIcfg\fR" 10
.IX Item "cfg"
a \s-1HASH\s0 reference or a filename.
.Sp
The \s-1HASH\s0 must have the following structure:
.Sp
.Vb 18
\& {
\&     backend1 => {
\&        new_options   => { HASH of new() options },
\&        query_options => { HASH of the native_query() options },
\&     },
\&     backend2 => {
\&         new_options   => {},
\&         query_options => {},
\&     },
\&     # ...
\&     default => {
\&         new_options => {
\&             maximum_to_retrieve => 10,
\&             search_debug        =>  1,
\&             # ...
\&         }
\&     }
\& }
.Ve
.Sp
Please see \*(L"new\*(R" in WWW::Search for the new_options and 
\&\*(L"native_query\*(R" in WWW::Search for the query_options.
.Sp
Special is the \f(CW\*(C`default\*(C'\fR section. This defines the default values for all
search backends. But the default only makes sense with the \f(CW\*(C`new_options\*(C'\fR ...
The UserAgent related options like \fIenv_proxy\fR will be overwritten by a given
\&\fIuseragent\fR.
.Sp
If you will use the filename variant, so the file must contain the \s-1HASH\s0 source.
This will be loaded and evaluated to get the \s-1HASH\s0. The filecontent looks like:
.Sp
.Vb 10
\& my $cfg = {
\&     AltaVista => {},
\&     HotBot    => {},
\&     default => {
\&         new_options => { 
\&             maximum_to_retrieve => 10,
\&             search_debug        =>  7,
\&         }
\&     }
\& }
.Ve
.Sp
If the value is \f(CW\*(C`undef\*(C'\fR the basic configuration via 
MOI::NetArt::Generator::SearchEngine::Config is used.
.Sp
default: undef
.IP "\fIuseragent\fR" 10
.IX Item "useragent"
set a custom LWP::UserAgent object to use. If \f(CW\*(C`undef\*(C'\fR the WWW::Search 
 internal useragent is used.
.Sp
default: undef
.Sh "cfg( [ HASHref  | filname ] )"
.IX Subsection "cfg( [ HASHref  | filname ] )"
Sets/Gets the attribute \f(CW\*(C`cfg\*(C'\fR ...
.ie n .Sh "useragent( [ $ua ] )"
.el .Sh "useragent( [ \f(CW$ua\fP ] )"
.IX Subsection "useragent( [ $ua ] )"
Sets/Gets the attribute \f(CW\*(C`useragent\*(C'\fR ...
.ie n .Sh "query( $string\fP [, \f(CW@backends] )"
.el .Sh "query( \f(CW$string\fP [, \f(CW@backends\fP] )"
.IX Subsection "query( $string [, @backends] )"
pass the querystring to the given search backends. If no backend is given,
the query is passed to the configured Backends by the \fIcfg\fR attribute.
If a backend not configured within, then the default configuration is used.
.ie n .Sh "fetch_result( $num )"
.el .Sh "fetch_result( \f(CW$num\fP )"
.IX Subsection "fetch_result( $num )"
fetches the given number of results as a \s-1HASH\s0 reference. The keys of the \s-1HASH\s0
are the result URLs, and the value is the first backend we found this \s-1URL\s0 ...
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MOI::Base, WWW::Search, MOI::NetArt::Generator::SearchEngine::Config 
.SH "AUTHOR"
.IX Header "AUTHOR"
Richard Leopold, <moi\-perl@leo.0n3.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2003 by Richard Leopold
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. 
